/*
 * Copyright (C) 2022 Ctrip.com.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.ctrip.sqllin.dsl.sql.compiler

import kotlinx.serialization.ExperimentalSerializationApi
import kotlinx.serialization.descriptors.SerialDescriptor
import kotlinx.serialization.encoding.AbstractEncoder
import kotlinx.serialization.modules.EmptySerializersModule
import kotlinx.serialization.modules.SerializersModule

/**
 * Encoder for converting Kotlin objects to SQL INSERT VALUES clauses using kotlinx.serialization.
 *
 * Leverages kotlinx.serialization's encoder API to traverse entity objects and generate
 * parameterized VALUES clauses. All values (including null, numbers, strings, ByteArray, etc.)
 * are converted to `?` placeholders and collected in [parameters] for safe execution.
 *
 * Automatically skips the primary key field if [primaryKeyName] is provided, allowing
 * database auto-increment to generate the value.
 *
 * Example output: `(?, ?, ?)` with parameters: ["John", 30, byteArray]
 *
 * @param parameters Mutable list to accumulate parameter values
 * @param primaryKeyName Name of primary key field to skip, or null to include all fields
 *
 * @author Yuang Qiao
 */
@OptIn(ExperimentalSerializationApi::class)
internal class InsertValuesEncoder(
    val parameters: MutableList<Any?>,
    val primaryKeyName: String?,
) : AbstractEncoder() {

    override val serializersModule: SerializersModule = EmptySerializersModule()

    private var elementsIndex = 0
    private var elementsCount = 0

    /**
     * StringBuilder accumulating the SQL VALUES clause.
     */
    private val sqlStrBuilder = StringBuilder("(")

    /**
     * Appends comma between values or closing parenthesis after the last value.
     *
     * Format: `?, ?, ?)`
     */
    private fun appendTail() {
        val symbol = if (elementsIndex < elementsCount - 1)
            ','
        else
            ')'
        sqlStrBuilder.append(symbol)
    }

    /**
     * Appends a parameter placeholder and records the value.
     *
     * @param value The parameter value (any type including null)
     */
    private fun appendAny(value: Any?) {
        sqlStrBuilder.append('?')
        parameters.add(value)
        appendTail()
    }

    /**
     * The complete SQL VALUES clause generated by this encoder.
     */
    val valuesSQL
        get() = sqlStrBuilder.toString()

    override fun encodeElement(descriptor: SerialDescriptor, index: Int): Boolean {
        elementsCount = descriptor.elementsCount
        elementsIndex = index
        val elementName = descriptor.getElementName(index)
        return elementName != primaryKeyName
    }

    /**
     * Encodes any non-null value as a parameter placeholder.
     */
    override fun encodeValue(value: Any) = appendAny(value)

    /**
     * Encodes null as a parameter placeholder.
     */
    override fun encodeNull() = appendAny(null)

    /**
     * Encodes enum as its ordinal integer value parameter.
     */
    override fun encodeEnum(enumDescriptor: SerialDescriptor, index: Int) = appendAny(index)
}