/*
 * Copyright (C) 2022 Ctrip.com.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.ctrip.sqllin.dsl.sql

import kotlinx.serialization.KSerializer

/**
 * Abstract base class representing a SQLite table with type-safe DSL operations.
 *
 * Table objects are typically generated by the sqllin-processor KSP plugin for data classes
 * annotated with [@DBRow][com.ctrip.sqllin.dsl.annotation.DBRow]. Each generated table object
 * (named `{ClassName}Table`) extends this class and provides:
 *
 * - Type-safe column property accessors for building SQL clauses
 * - Serialization support via kotlinx.serialization
 * - Primary key metadata for INSERT/UPDATE operations
 *
 * Table objects are used as receivers for DSL operations within [com.ctrip.sqllin.dsl.DatabaseScope]:
 *
 * Example:
 * ```kotlin
 * @Serializable
 * @DBRow
 * data class Person(val id: Long?, val name: String, val age: Int)
 *
 * // Generated by processor: object PersonTable : Table<Person>("Person") { ... }
 *
 * database {
 *     PersonTable INSERT person
 *     PersonTable SELECT WHERE(PersonTable.age GTE 18)
 * }
 * ```
 *
 * @param T The entity type this table represents
 * @property tableName The name of the SQLite table
 *
 * @author Yuang Qiao
 */
public abstract class Table<T>(
    internal val tableName: String,
) {
    /**
     * Returns the kotlinx.serialization serializer for the entity type.
     *
     * Used internally for serializing entities to SQL INSERT/UPDATE statements
     * and deserializing query results to entity objects.
     */
    public abstract fun kSerializer(): KSerializer<T>

    /**
     * Metadata about the table's primary key configuration.
     *
     * - `null` if the table has no primary key
     * - Contains information about single or composite primary keys, including
     *   whether the key is auto-incrementing or backed by SQLite's rowid
     *
     * This information is extracted from [@PrimaryKey][com.ctrip.sqllin.dsl.annotation.PrimaryKey]
     * and [@CompositePrimaryKey][com.ctrip.sqllin.dsl.annotation.CompositePrimaryKey] annotations
     * during code generation.
     */
    public abstract val primaryKeyInfo: PrimaryKeyInfo?
}